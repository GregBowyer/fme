<?xml version = '1.0' encoding = 'windows-1252'?>
<!DOCTYPE project>

<project name="fme" default="usage" basedir=".">

    <description>
        FME build script
    </description>

    <!-- ================ -->
    <!-- Build properties -->
    <!-- ================ -->

    <!-- Name of the application to build -->
    <property name="name" value="FME" />

    <!-- Directory for compiled classes -->
    <property name="bin.dir" location="bin" />

    <!-- Directory which contains source files -->
    <property name="src.dir" location="src" />
    <path id="all.source.path">
        <pathelement path="${src.dir}"/>
    </path>

    <!-- Directory which contains library files -->
    <property name="lib.dir" location="lib" />
    <path id="class.path">
        <fileset dir="${lib.dir}">
            <exclude name=".svn"/>
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- Directory which contains engine files -->
    <property name="engine.dir" location="engine" />

    <!-- Directory which contains resource files -->
    <property name="res.dir" location="res" />

    <!-- Directory which contains icon files -->
    <property name="icons.dir" location="icons" />
    
    <!-- Properties for final jar -->
    <property name="dist.jar.file" location="../../Build/fme.jar" />
    <property name="dist.dir" location="../../Build" />
    <property name="dist.tmp.dir" location="../../Build/tmp" />
    <patternset id="non.source.set">
        <exclude name="**/.svn"/>
        <exclude name="**/*.java"/>
    </patternset>
    <property name="manifest.dir" location="../../Manifest" />
    <property name="scripts.dir" location="../../Scripts" />
    <property name="misc.dir" location="../../Misc" />
    <property name="examples.dir" location="../../Examples" />

    <!-- ================ -->
    <!-- Tests properties -->
    <!-- ================ -->

    <!-- Directory for compiled test classes -->
    <property name="test.bin.dir" location="bin_tests" />

    <!-- Directory which contains test files -->
    <property name="test.src.dir" location="tests" />

    <!-- Directory which contains library files for tests-->
    <property name="test.lib.dir" location="lib_tests" />
    <path id="test.class.path">
        <fileset dir="${test.lib.dir}">
            <exclude name=".svn"/>
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- Test code coverage -->
    <property name="test.coverageclasses.dir" location="bin_coverage" />
    <property name="test.coverageclasses.file" value="cobertura.ser" />
    <property name="test.report.dir"  value="../../Reports/Tests"/>
    <property name="test.ccreport.dir"  value="../../Reports/CodeCoverage"/>

    <property name="cobertura.dir" value="../../Tools/cobertura" />
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <!-- ===== -->
    <!-- Usage -->
    <!-- ===== -->

    <target name="usage">
        <echo message=""/>
        <echo message="${name} build script"/>
        <echo message="-----------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>
        <echo message="assemble --> Build the application"/>
        <echo message="build    --> Just build the main JAR file of the application"/>
        <echo message="compile  --> Compile source files"/>
        <echo message="test     --> Run unit tests"/>
        <echo message="clean    --> Remove all files which are generated by this script"/>
        <echo message=""/>
    </target>

    <!-- =============================== -->
    <!-- Assemble the distribution files -->
    <!-- =============================== -->

    <target name="assemble"
        depends="build">

        <delete includeemptydirs="true" dir="${dist.dir}">
        </delete>

        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/lib"/>
        <mkdir dir="${dist.tmp.dir}"/>

        <copy todir="${dist.tmp.dir}">
            <fileset dir="${bin.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <copy todir="${dist.tmp.dir}" overwrite="true">
            <fileset dir="${manifest.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <jar basedir="${dist.tmp.dir}"
             destfile="${dist.dir}/lib/fme.jar"
             manifest="${dist.tmp.dir}/META-INF/MANIFEST.MF"/>

        <delete includeemptydirs="true" dir="${dist.tmp.dir}">
        </delete>

        <copy todir="${dist.dir}/lib">
            <fileset dir="${lib.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <copy todir="${dist.dir}/lib">
            <fileset dir="${lib.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <mkdir dir="${dist.dir}/icons"/>

        <copy todir="${dist.dir}/icons">
            <fileset dir="${icons.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <mkdir dir="${dist.dir}/engine"/>

        <copy todir="${dist.dir}/engine">
            <fileset dir="${engine.dir}">
                <include name="wsl*/**/*" />
                <include name="*.bat" />
                <include name="*.sh" />
            </fileset>
        </copy>

        <mkdir dir="${dist.dir}/res"/>

        <copy todir="${dist.dir}/res">
            <fileset dir="${res.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <mkdir dir="${dist.dir}/examples"/>

        <copy todir="${dist.dir}/examples">
            <fileset dir="${examples.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <copy todir="${dist.dir}" file="env.bat" />
        <copy todir="${dist.dir}" file="env.sh" />
        
        <copy todir="${dist.dir}">
            <fileset dir="${scripts.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <copy todir="${dist.dir}">
            <fileset dir="${misc.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

    </target>

    <!-- ======================== -->
    <!-- Build the final jar file -->
    <!-- ======================== -->

    <target name="build"
        depends="compile_build">

        <delete includeemptydirs="true" dir="${dist.dir}">
        </delete>

        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.tmp.dir}"/>

        <copy todir="${dist.tmp.dir}">
            <fileset dir="${bin.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <copy todir="${dist.tmp.dir}" overwrite="true">
            <fileset dir="${manifest.dir}">
                <patternset refid="non.source.set" />
            </fileset>
        </copy>

        <jar basedir="${dist.tmp.dir}"
             destfile="${dist.jar.file}"
             manifest="${dist.tmp.dir}/META-INF/MANIFEST.MF"/>

        <delete includeemptydirs="true" dir="${dist.tmp.dir}">
        </delete>
    </target>

    <!-- ======================== -->
    <!-- Compile all source files -->
    <!-- ======================== -->

    <target name="compile"
        description="Compile all source files">

        <!-- Create bin directory -->
        <mkdir dir="${bin.dir}"/>

        <!-- Compile the code -->
        <javac
            destdir="${bin.dir}"
            classpathref="class.path"
            includeantruntime="false"
            debug="on"
            deprecation="on"
            optimize="off">
            <src>
                <path refid="all.source.path" />
            </src>
        </javac>

        <!-- Delete old test coverage -->
        <delete file="${test.coverageclasses.dir}/${test.coverageclasses.file}" />

        <!-- Build instrumented code for test coverage -->
        <cobertura-instrument datafile="${test.coverageclasses.dir}/${test.coverageclasses.file}" todir="${test.coverageclasses.dir}">
            <fileset dir="${bin.dir}">
                <include name="**/*.class" />
                <exclude name="**/*Test.class" />
                <exclude name="**/Mock*.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="compile_build"
        description="Compile all source files (for build)">

        <!-- Create bin directory -->
        <mkdir dir="${bin.dir}"/>

        <!-- Compile the code -->
        <javac
            destdir="${bin.dir}"
            classpathref="class.path"
            includeantruntime="false"
            debug="on"
            deprecation="on"
            optimize="on">
            <src>
                <path refid="all.source.path" />
            </src>
        </javac>
    </target>

    <!-- ============= -->
    <!-- Run all tests -->
    <!-- ============= -->

    <target name="test"
        depends="compile">

        <echo message=""/>
        <echo message="Testing ${name}"/>
        <echo message="-----------------------------------"/>

        <!-- Create directory for test reports -->
        <mkdir dir="${test.report.dir}"/>

        <!-- Create directory for compiled tests -->
        <mkdir dir="${test.bin.dir}"/>

        <javac
            destdir="${test.bin.dir}"
            includeantruntime="false"
            debug="on"
            deprecation="on"
            optimize="off">
            <classpath>
                <path refid="class.path"/>
                <path refid="test.class.path"/>
                <path>
                    <pathelement path="${bin.dir}"/>
                </path>
            </classpath>
            <src>
                <path>
                    <pathelement path="${test.src.dir}"/>
                </path>
            </src>
        </javac>

        <!-- Run unit tests only - (excluding performance tests) -->
        <junit fork="true" printsummary="yes">
            <sysproperty key="net.sourceforge.cobertura.datafile"
                file="${test.coverageclasses.dir}/${test.coverageclasses.file}" />
            <classpath location="${test.coverageclasses.dir}" />
            <classpath>
                <path refid="class.path"/>
                <path refid="test.class.path"/>
                <path>
                    <pathelement path="${test.bin.dir}"/>
                </path>
                <path>
                    <pathelement path="${bin.dir}"/>
                </path>
            </classpath>
            <classpath refid="cobertura.classpath" />
            <formatter type="xml"/>
            <batchtest
                haltonfailure="on"
                todir="${test.coverageclasses.dir}">
                <fileset dir="${test.bin.dir}">
                    <include name="unit/**/*Test.class"/>
                    <include name="component/**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <!-- Create reports -->
        <junitreport todir="${test.report.dir}">
            <fileset dir="${test.coverageclasses.dir}">
                <include name="**/TEST-*.xml"/>
            </fileset>
            <report todir="${test.report.dir}"/>
        </junitreport>

        <cobertura-report format="html"
            datafile="${test.coverageclasses.dir}/${test.coverageclasses.file}"
            destdir="${test.ccreport.dir}/${name}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>

    </target>

    <!-- ============================== -->
    <!-- Remove all build related files -->
    <!-- ============================== -->

    <target name="clean">
        <delete includeemptydirs="true" dir="${bin.dir}">
        </delete>
        <delete includeemptydirs="true" dir="${test.bin.dir}">
        </delete>
        <delete includeemptydirs="true" dir="${test.coverageclasses.dir}">
        </delete>
        <delete includeemptydirs="true" dir="${test.report.dir}">
        </delete>
        <delete includeemptydirs="true" dir="${test.ccreport.dir}">
        </delete>
    </target>

</project>
